Estudos de caso

react_hooks

Usando o State Hook

O Hook de estado é uma função que permite adicionar o estado do React a um componente de função. Em outras palavras, ele permite que você adicione o estado do React a componentes de função.

O Hook de estado é semelhante a this.state em uma classe, exceto que ele retorna um par de valores: o estado atual e uma função que atualiza o estado. Você pode chamar essa função de atualização de estado a partir de um manipulador de eventos ou de qualquer lugar. É semelhante a this.setState em uma classe, exceto que não mescla o estado antigo com o novo.

O Hook de estado é uma maneira de adicionar o estado local a uma função. Em vez de usar uma classe, você pode usar um Hook de estado para adicionar estado local a um componente de função.

O Hook de estado não substitui seu conhecimento de React. Se você entende como as classes funcionam, você provavelmente sabe que Hooks não fornecem uma maneira de “compartilhar” o estado entre os componentes. Por exemplo, se você tiver um componente de função e um componente de classe, você não pode usar o Hook de estado para compartilhar o estado entre os dois componentes.

### Exemplo de uso do Hook de estado

```js
import React, { useState } from 'react';
const Example = () => {
  // Declara uma nova variável de state, que chamaremos de "count"
  const [count, setCount] = useState(0);
  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>
        Clique aqui
      </button>
    </div>
  );
}
```

### Usando vários Hooks de estado
```js
import React, { useState } from 'react';

function ExampleWithManyStates() {
  // Declara várias variáveis de state!
  const [age, setAge] = useState(42);
  const [fruit, setFruit] = useState('banana');
  const [todos, setTodos] = useState([{ text: 'Aprender Hooks' }]);
  // ...
}
```
### Parametros da funcao de callback do useState
```js
const [state, setState] = useState(initialState);
```
### useState com funcao de callback
```js
const [state, setState] = useState(() => {
  const initialState = someExpensiveComputation(props);
  return initialState;
});
```


### Usando o Effect Hook

O Hook de efeito permite executar efeitos colaterais em componentes de função. Os efeitos colaterais são operações secundárias que podem ser executadas após a renderização do componente. Os efeitos colaterais podem ser qualquer coisa, desde a mutação de uma variável até a busca de dados remotos.

### diferenca entre useEfect e lifeCycle
```js
useEffect(() => {
  document.title = `Você clicou ${count} vezes`;
});

### Em useEfect eu posso usar o .then para executar uma funcao depois que o useEffect for executado, enquanto no lifeCycle eu tenho que usar o componentDidMount para executar uma funcao depois que o componente for montado.
```
```js
useEffect(() => {
  fetch('https://api.github.com/users/freitas-ma')
    .then(response => response.json())
    .then(data => {
      console.log(data);
    });
})

O .then e uma funcao que recebe uma funcao de callback que sera executada depois que a funcao anterior for executada.
```
```js




```
```js
componentDidMount() {
  document.title = `Você clicou ${this.state.count} vezes`;
}

A diferenca entre useEffect e lifeCycle é que o useEffect é executado após cada renderização do componente, enquanto o lifeCycle é executado apenas uma vez após a montagem do componente.

```

### Exemplo de uso do useEffect com dependencia
```js
useEffect(() => {
  document.title = `Você clicou ${count} vezes`;
}, [count]); // Apenas re-execute o efeito quando o valor count mudar
```

### explique encadeament opcional do javascript
```js
const name = user?.name;
```
O encadeamento opcional é um recurso do JavaScript que permite ler o valor de uma propriedade localizada profundamente em uma cadeia de objetos sem ter que validar explicitamente que cada referência na cadeia é válida. O encadeamento opcional é marcado com um ponto de interrogação (?.) E interrompe a avaliação e retorna undefined se o valor da esquerda for null ou undefined.

addEventListner e uma funcao que recebe dois parametros, o primeiro e o nome do evento e o segundo e uma funcao de callback que sera executada quando o evento for disparado.

removeEventListner e uma funcao que recebe dois parametros, o primeiro e o nome do evento e o segundo e uma funcao de callback que sera executada quando o evento for disparado.

O addEventListner tem que ser limpo sempre que o componente for desmontado usado o removeEventListner, caso contrario o evento ficara ativo mesmo depois do componente ser desmontado.


Principal regra dos hooks e que eles devem ser chamados apenas no nivel mais alto do componente, nao devem ser chamados dentro de loops, condicionais ou funcoes aninhadas.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
useCallback e um hook que retorna uma funcao memorizada, ou seja, uma funcao que nao sera recriada toda vez que o componente for renderizado, a funcao so sera recriada quando as dependencias passadas para o useCallback forem alteradas.

### Exemplo de uso do useCallback
```js
const memoizedCallback = useCallback(
  () => {
    doSomething(a, b);
  },
  [a, b],
);
```
//TODO Parei aqui 27/04!!!

Basicamente o useCallback e utilizado para chamar uma funcao apenas quando as dependencias passadas para o useCallback forem alteradas, enquanto o useMemo e utilizado para criar um valor apenas quando as dependencias passadas para o useMemo forem alteradas.

Posso sempre alterar um elemento pai sem que o elemento filho seja alterado usando o useCallback sem passar dependencias para ele, enquanto o useMemo sempre ira recriar o valor quando o componente for renderizado novamente.

Um exemplo seria, eu tenho um componente pai que renderiza um componente filho, o componente filho recebe uma funcao como propriedade, se eu passar essa funcao como dependencia para o useCallback, a funcao so sera recriada quando o componente pai for renderizado novamente, enquanto se eu passar essa funcao como dependencia para o useMemo, a funcao sera recriada toda vez que o componente filho for renderizado.

Para ajustar o setState (setCounter*), posso passar uma prop diretamente na decalaracao do useCallback e usar essa prop no lugar do setState, assim o useCallback nao ira recriar a funcao toda vez que o componente for renderizado novamente.

const increment = useCallback((props) => {

  setCounter((c) => c + props.value);

}, []);

// Assim temos o uso de uma funcao dentro de useCallback, o que faz com que nao hajam dependencias, e a funcao nao seja recriada toda vez que o componente for renderizado novamente.
Entretanto, o setCounter continua sendo atualizado por fora, mantendo toda a logica a funcionar.


------------------------------------------------------------------------------------------------------------------------------------------------------------------

useMemo e um hook que retorna um valor memorizado, ou seja, um valor que nao sera recriado toda vez que o componente for renderizado, o valor so sera recriado quando as dependencias passadas para o useMemo forem alteradas.

Um exemplo de useMemo e quando eu tenho um componente que renderiza uma lista de itens, se eu passar a lista de itens como dependencia para o useMemo, a lista de itens so sera recriada quando a lista de itens for alterada.

{ useMemo(() => <Component />, [list]) }

------------------------------------------------------------------------------------------------------------------------------------------------------------------

useRef e um hook que retorna um objeto mutavel com a propriedade current, a propriedade current e inicializada com o valor passado para o hook, o valor da propriedade current pode ser alterado sem que o componente seja renderizado novamente.

const inputRef = useRef(null);
para se referir ao valor de useRef eu uso inputRef.current
por exemplo
<input ref={inputRef} />

Este hook pode ser usado para passar referencias globais em todo o documento, por exemplo, para pegar o valor de um input, ou para passar referencias de elementos para bibliotecas de terceiros.

O elemento a ser referenciado deve conter a propriedade ref={inputRef}
e deve ser apontado comoo .Provider do react-router-dom.


------------------------------------------------------------------------------------------------------------------------------------------------------------------

useImperativeHandle e um hook que permite que um componente filho exponha funcoes para o componente pai, ou seja, permite que o componente pai chame funcoes do componente filho.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

useLayoutEffect e um hook que funciona de forma semelhante ao useEffect, a diferenca e que o useLayoutEffect e executado antes do componente ser renderizado na tela, enquanto o useEffect e executado depois do componente ser renderizado na tela.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

useDebugValue e um hook que permite que voce exiba um label para um valor customizado durante a depuracao.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

useContext e um hook que permite que voce compartilhe dados entre componentes sem precisar passar props manualmente entre eles.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

useReducer e um hook que permite que voce gerencie o estado de um componente usando uma funcao reducer, o useReducer e semelhante ao useState, a diferenca e que o useReducer e mais adequado para gerenciar estados complexos.






##################################################################################################################################################################

### Como organizar os componentes do React?

A organizacao dos componentes do React pode ser feita de diversas formas, a forma mais comum e a organizacao por tipo de componente, por exemplo, componentes de layout, componentes de pagina, componentes de formulario, componentes de lista, componentes de item, componentes de botao, componentes de input, componentes de imagem, componentes de texto, componentes de icone, componentes de menu, componentes de modal, componentes de tabela, componentes de grafico, componentes de mapa, componentes de video, componentes de audio, componentes de animacao, componentes de carregamento, componentes de erro, componentes de aviso, componentes de sucesso, componentes de informacao, componentes de alerta, componentes de notificacao, componentes de toast, componentes de tooltip, componentes de badge, componentes de card, componentes de breadcrumb, componentes de dropdown, componentes de navbar, componentes de pagination, componentes de progress, componentes de spinner, componentes de tabs, componentes de toast, componentes de tooltip, componentes de badge, componentes de card, componentes de breadcrumb, componentes de dropdown, componentes de navbar, componentes de pagination, componentes de progress, componentes de spinner, componentes de tabs, componentes de accordion, componentes de carousel, componentes de collapse, componentes de list-group, componentes de modal, componentes de navbar, componentes de offcanvas, componentes de popover, componentes de scrollspy, componentes de toast, componentes de tooltip, componentes de badge, componentes de card, componentes de breadcrumb, componentes de dropdown, componentes de navbar, componentes de pagination, componentes de progress, componentes de spinner, componentes de tabs, componentes de accordion, componentes de carousel, componentes de collapse, componentes de list-group, componentes de modal, componentes de navbar, componentes de offcanvas, componentes de popover, componentes de scrollspy, componentes de toast, componentes de tooltip, componentes de badge, componentes de card, componentes de breadcrumb, componentes de dropdown, componentes de navbar, componentes de pagination, componentes de progress, componentes de spinner, componentes de tabs, componentes de accordion, componentes de carousel, componentes de collapse

### O que é o payload no Redux?

O payload no Redux e um objeto que contem os dados que serao enviados para a store, o payload pode ser qualquer tipo de dado, como um objeto, um array, uma string, um numero, um booleano, etc.

useFetch e um hook que permite que voce faca requisicoes HTTP usando a API fetch, o useFetch e um hook customizado, ou seja, um hook criado por voce mesmo.

O useFetch recebe uma URL como parametro, e retorna um objeto com os dados da requisicao, o objeto retornado pelo useFetch possui as seguintes propriedades:

data: os dados da requisicao
loading: um booleano que indica se a requisicao esta em andamento
error: um booleano que indica se a requisicao falhou
request: uma funcao que permite que voce faca uma nova requisicao
O useFetch tambem recebe um segundo parametro, que e um objeto de configuracao, o objeto de configuracao possui as seguintes propriedades:

method: o metodo HTTP da requisicao, por padrao e GET
headers: os cabecalhos da requisicao, por padrao e um objeto vazio
body: o corpo da requisicao, por padrao e um objeto vazio
O useFetch tambem recebe um terceiro parametro, que e um objeto de dependencias, o objeto de dependencias e usado para indicar quando o hook deve fazer uma nova requisicao, por padrao o hook faz uma nova requisicao sempre que o componente for renderizado novamente.

O useFetch tambem recebe um quarto parametro, que e um objeto de configuracao, o objeto de configuracao possui as seguintes propriedades:

initialData: os dados iniciais da requisicao, por padrao e null
initialLoading: um booleano que indica se a requisicao esta em andamento, por padrao e false
initialError: um booleano que indica se a requisicao falhou, por padrao e false
O useFetch tambem recebe um quinto parametro, que e um objeto de configuracao, o objeto de configuracao possui as seguintes propriedades:

skip: um booleano que indica se o hook deve fazer uma nova requisicao, por padrao e false

const useFetch = (url, options, dependencies, initialData, initialLoading, initialError, skip) => {
  const [data, setData] = useState(initialData);
  const [loading, setLoading] = useState(initialLoading);
  const [error, setError] = useState(initialError);

  const request = useCallback(async () => {
    try {
      setLoading(true);
      const response = await fetch(url, options);
      const json = await response.json();
      setData(json);
      setError(null);
    } catch (err) {
      setData(null);
      setError(err);
    } finally {
      setLoading(false);
    }
  }, [url, options]);

  useEffect(() => {
    if (!skip) {
      request();
    }
  }, dependencies);

  return { data, loading, error, request };
};

export default useFetch;

------------------------------------------------------------------------------------------------------------------------------------------------------------------

### Fale sobre errorBoundary no React.

ErrorBoundary e um componente do React que permite que voce trate erros que ocorrem em componentes filhos, o ErrorBoundary e um componente de classe, ou seja, um componente que estende a classe Component do React.

O ErrorBoundary possui dois metodos de ciclo de vida, o metodo componentDidCatch e o metodo render, o metodo componentDidCatch e chamado quando um erro ocorre em um componente filho, o metodo render e chamado quando um erro ocorre em um componente filho.

O ErrorBoundary tambem possui um metodo de ciclo de vida, o metodo getDerivedStateFromError, o metodo getDerivedStateFromError e chamado quando um erro ocorre em um componente filho, o metodo getDerivedStateFromError e usado para atualizar o estado do componente ErrorBoundary com base no erro que ocorreu em um componente filho.

O metodo de ciclo de vida componentDidCatch recebe dois parametros, o primeiro parametro e o erro que ocorreu em um componente filho, o segundo parametro e um objeto que contem informacoes sobre o erro que ocorreu em um componente filho.

O metodo de ciclo de vida getDerivedStateFromError recebe um parametro, o parametro e o erro que ocorreu em um componente filho.

O metodo de ciclo de vida render recebe dois parametros, o primeiro parametro e o erro que ocorreu em um componente filho, o segundo parametro e um objeto que contem informacoes sobre o erro que ocorreu em um componente filho.

### Exemplifique errorBoundary no React.
```js

import React, { Component } from 'react';

class ErrorBoundary extends Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
    console.log(error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return <h1>Something went wrong.</h1>;
    }

    return this.props.children;
  }
}

export default ErrorBoundary;

```
